<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hashed</title><link>https://hashed.io/</link><description>Recent content on Hashed</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© 2022 Hashed</copyright><lastBuildDate>Fri, 19 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://hashed.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Hashed Summit 2021</title><link>https://hashed.io/team/</link><pubDate>Tue, 21 Dec 2021 00:00:00 +0000</pubDate><guid>https://hashed.io/team/</guid><description>After the long lockdown, we had our first company summit in Cancun. We wanted to get out of our houses and celebrate a year of learning and growth. Hang out, talk about the plan for 2022, and have fun together. Little did we know the team activity would become a survival test. Everyone arrived at noon on Friday, checked into the hotel, and grabbed lunch while enjoying the sea views.</description><content>&lt;p>After the long lockdown, we had our first company summit in Cancun. We wanted to get out of our houses and celebrate a year of learning and growth. Hang out, talk about the plan for 2022, and have fun together. Little did we know the team activity would become a survival test.
&lt;p>
&lt;img src="https://hashed.io/img/team/Arrival_hu97ae672127d7352301317f9891f30e57_13397404_2000x0_resize_q75_box.jpeg" alt="Our team">
&lt;/p>
Everyone arrived at noon on Friday, checked into the hotel, and grabbed lunch while enjoying the sea views. After two hours of downtime, we headed to our company meeting.&lt;/p>
&lt;p>One of the main reasons to get the team together was to recap a successful year and share plans for the next year. We gave an industry update and talked about doubling down on TLOS and Substrate, expanding our Node operations, and keeping an eye on the Bitcoin Lightning network. We also talked about the importance of quality, polish, and what it means to live up to our Elite Builder ethos.&lt;/p>
&lt;p>The next day we had our team activity: a paddleboard loop from Cancun’s Nichupte Lagoon to the Caribbean Sea. The lagoon waters were calm. We stopped by a quiet beach and took a refreshing swim. Someone was bitten by something and screamed hysterically (that someone might have been me).
&lt;p>
&lt;img src="https://hashed.io/img/team/Activity_hu43c747951cdecadeabb377addec56c90_872125_2000x0_resize_q75_box.jpg" alt="Our team">
&lt;/p>
To get to the sea, we had to go under a bridge large enough for boats to go through. This is when the weather started to change and, in an instant, we were paddling under heavy rain with the wind against us. This meant we had to frantically paddle on only one side to avoid being pushed over by the wind. The situation felt dangerous and our WFH bodies were in pain. The thought “If I die, no one knows about my tokens” crossed our minds. With renewed determination, we made it. We were sore, wet, and cold, but happy.&lt;/p>
&lt;p>The next day we had surfing lessons and by noon everyone was on the way home.
&lt;p>
&lt;img src="https://hashed.io/img/team/team-1_hu28e2d306d0d276a7c676e50c2d804e44_2390725_2000x0_resize_q75_box.jpeg" alt="Our team">
&lt;/p>
Like most, I love not having to go to the office, but there is something very special about in-person time. We are a young team (using “we” generously with me). Most of our Engineers were hired during the pandemic. A generation for whom WFH is normal. But the experience of discussing exciting news in person, going for a swim, and enjoying the sun together can’t be replaced. Good things are better with friends to share them.&lt;/p>
&lt;!---
&lt;p>
&lt;img src="https://hashed.io/img/team/team-5_huc391073c8f9f310c15163143648a8a02_2059817_2000x0_resize_q75_box.jpg" alt="Our team">
&lt;/p>
&lt;p>
&lt;img src="https://hashed.io/img/team/team-4_hu5ead2b3b447e14f635a1c254128ae7f8_1031943_2000x0_resize_q75_box.jpg" alt="Our team">
&lt;/p>
---></content></item><item><title>An underrated speech</title><link>https://hashed.io/articles/article-1/</link><pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate><guid>https://hashed.io/articles/article-1/</guid><description/><content/></item><item><title>Hashed values series: on a multichain future</title><link>https://hashed.io/articles/article-3/</link><pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate><guid>https://hashed.io/articles/article-3/</guid><description/><content/></item><item><title>Kitchen Lands tokenizes 35 acres of wyoming land</title><link>https://hashed.io/articles/article-2/</link><pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate><guid>https://hashed.io/articles/article-2/</guid><description/><content/></item><item><title>Solana vs Polkadot</title><link>https://hashed.io/articles/article-4/</link><pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate><guid>https://hashed.io/articles/article-4/</guid><description/><content/></item><item><title/><link>https://hashed.io/assets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hashed.io/assets/</guid><description>Assets Logos Click to Download Click to Download Png Click to Download Click to Download Click to Download Click to Download Click to Download Avatar Click to Download Click to Download Click to Download Symbol Click to Download Click to Download Click to Download Click to Download Halftone Click to Download Click to Download Click to Download Click to Download Click to Download Click to Download</description><content>&lt;h1 id="assets">Assets&lt;/h1>
&lt;h2 id="logos">Logos&lt;/h2>
&lt;div class="grid">
&lt;figure>
&lt;img src="images/jpg/logo-black.jpg" alt="">
&lt;figcaption>&lt;a download href="images/jpg/logo-black.jpg">Click to Download&lt;/a>&lt;/figcaption>
&lt;/figure>
&lt;figure>
&lt;img src="images/jpg/logo-green-blue.jpg" alt="">
&lt;figcaption>&lt;a download href="images/jpg/logo-green-blue.jpg">Click to Download&lt;/a>&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;h3 id="png">Png&lt;/h3>
&lt;div class="grid">
&lt;figure>
&lt;img src="images/png/logo-black.png" alt="">
&lt;figcaption>&lt;a download href="images/png/logo-black.png">Click to Download&lt;/a>&lt;/figcaption>
&lt;/figure>
&lt;figure>
&lt;img src="images/png/logo-green-blue.png" alt="">
&lt;figcaption>&lt;a download href="images/png/logo-green-blue.png">Click to Download&lt;/a>&lt;/figcaption>
&lt;/figure>
&lt;figure>
&lt;img src="images/png/logo-gradient-white.png" alt="">
&lt;figcaption>&lt;a download href="images/png/logo-gradient-white.png">Click to Download&lt;/a>&lt;/figcaption>
&lt;/figure>
&lt;figure>
&lt;img src="images/png/logo-black.png" alt="">
&lt;figcaption>&lt;a download href="images/png/logo-black.png">Click to Download&lt;/a>&lt;/figcaption>
&lt;/figure>
&lt;figure>
&lt;img src="images/png/logo-white-blue.png" alt="">
&lt;figcaption>&lt;a download href="images/png/logo-white-blue.png">Click to Download&lt;/a>&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;h2 id="avatar">Avatar&lt;/h2>
&lt;div class="grid">
&lt;figure>
&lt;img src="images/avatar/black-white.jpg" alt="">
&lt;figcaption>&lt;a download href="images/avatar/black-white.jpg">Click to Download&lt;/a>&lt;/figcaption>
&lt;/figure>
&lt;figure>
&lt;img src="images/avatar/gradient.jpg" alt="">
&lt;figcaption>&lt;a download href="images/avatar/gradient.jpg">Click to Download&lt;/a>&lt;/figcaption>
&lt;/figure>
&lt;figure>
&lt;img src="images/avatar/green-white.jpg" alt="">
&lt;figcaption>&lt;a download href="images/avatar/green-white.jpg">Click to Download&lt;/a>&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;h2 id="symbol">Symbol&lt;/h2>
&lt;div class="grid">
&lt;figure>
&lt;img src="images/symbol/black.png" alt="">
&lt;figcaption>&lt;a download href="images/symbol/black.png">Click to Download&lt;/a>&lt;/figcaption>
&lt;/figure>
&lt;figure>
&lt;img src="images/symbol/gradient.png" alt="">
&lt;figcaption>&lt;a download href="images/symbol/gradient.png">Click to Download&lt;/a>&lt;/figcaption>
&lt;/figure>
&lt;figure>
&lt;img src="images/symbol/green.png" alt="">
&lt;figcaption>&lt;a download href="images/symbol/green.png">Click to Download&lt;/a>&lt;/figcaption>
&lt;/figure>
&lt;figure>
&lt;img src="images/symbol/white.png" alt="">
&lt;figcaption>&lt;a download href="images/symbol/white.png">Click to Download&lt;/a>&lt;/figcaption>
&lt;/figure>
&lt;/div>
&lt;h2 id="halftone">Halftone&lt;/h2>
&lt;div class="grid">
&lt;figure>
&lt;img src="images/halftone/circular.jpg" alt="">
&lt;figcaption>&lt;a download href="images/halftone/circular.jpg">Click to Download&lt;/a>&lt;/figcaption>
&lt;/figure>
&lt;figure>
&lt;img src="images/halftone/earth.jpg" alt="">
&lt;figcaption>&lt;a download href="images/halftone/earth.jpg">Click to Download&lt;/a>&lt;/figcaption>
&lt;/figure>
&lt;figure>
&lt;img src="images/halftone/eye.jpg" alt="">
&lt;figcaption>&lt;a download href="images/halftone/eye.jpg">Click to Download&lt;/a>&lt;/figcaption>
&lt;/figure>
&lt;figure>
&lt;img src="images/halftone/grid.jpg" alt="">
&lt;figcaption>&lt;a download href="images/halftone/grid.jpg">Click to Download&lt;/a>&lt;/figcaption>
&lt;/figure>
&lt;figure>
&lt;img src="images/halftone/lines.jpg" alt="">
&lt;figcaption>&lt;a download href="images/halftone/lines.jpg">Click to Download&lt;/a>&lt;/figcaption>
&lt;/figure>
&lt;figure>
&lt;img src="images/halftone/pattern.jpg" alt="">
&lt;figcaption>&lt;a download href="images/halftone/pattern.jpg">Click to Download&lt;/a>&lt;/figcaption>
&lt;/figure>
&lt;/div></content></item><item><title>Document Graph</title><link>https://hashed.io/dge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hashed.io/dge/</guid><description>Introduction Document Graph is a flexible persistence and modeling framework for blockchain applications.
Use Cases Document Graph is currently used for a number of use cases. Here are some real-world examples that we are using it for. Interestingly, all of the below use cases can be handled within the same graph where nodes can be linked to each other across contexts.
DAOs DAOs have have descriptive attributes. They also have members, proposals, assignments, quests, bounties, badges, and many other data types that are maintained to support a fully functional platform.</description><content>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>Document Graph is a flexible persistence and modeling framework for blockchain applications.&lt;/p>
&lt;h1 id="use-cases">Use Cases&lt;/h1>
&lt;p>Document Graph is currently used for a number of use cases. Here are some real-world examples that we are using it for. Interestingly, all of the below use cases can be handled within the same graph where nodes can be linked to each other across contexts.&lt;/p>
&lt;h2 id="daos">DAOs&lt;/h2>
&lt;p>DAOs have have descriptive attributes. They also have members, proposals, assignments, quests, bounties, badges, and many other data types that are maintained to support a fully functional platform.&lt;/p>
&lt;p>Here&amp;rsquo;s an actual example of how Document Graph is used to manage a few components within a DAO&amp;rsquo;s information space.&lt;/p>
&lt;p>&lt;img src="graph-example.png" alt="Example Graph">&lt;/p>
&lt;h2 id="supply-chain">Supply Chain&lt;/h2>
&lt;p>We use Document Graph for a supply chain traceability application. An &lt;code>Item&lt;/code> and its various &lt;code>Checkpoints&lt;/code> are saved as &lt;code>documents&lt;/code>. When a new QR code &lt;code>scan&lt;/code> event occurs, it extends the graph for that item to contain a new &lt;code>Checkpoint&lt;/code>.&lt;/p>
&lt;p>Since a &lt;code>Checkpoint&lt;/code> is a document, it can store any arbitrary data that describes that event, such as weight, longitude, latitude, cost, and even photos or other files such as packing lists. Files are stored in IPFS and anchored into the on-chain document.&lt;/p>
&lt;p>Users have the option to save data directly onto the chain (for access within smart contracts) or to save the data to IPFS. Users also have the option to encrypt the data with a password of their choice.&lt;/p>
&lt;img id="plantuml-eg"/>
&lt;script src="https://hashed.io/js/rawdeflate.js">&lt;/script>
&lt;script>
function encode64(data) {
r = "";
for (i=0; i&lt;data.length; i+=3) {
if (i+2==data.length) {
r +=append3bytes(data.charCodeAt(i), data.charCodeAt(i+1), 0);
} else if (i+1==data.length) {
r += append3bytes(data.charCodeAt(i), 0, 0);
} else {
r += append3bytes(data.charCodeAt(i), data.charCodeAt(i+1),
data.charCodeAt(i+2));
}
}
return r;
}
function append3bytes(b1, b2, b3) {
c1 = b1 >> 2;
c2 = ((b1 &amp; 0x3) &lt;&lt; 4) | (b2 >> 4);
c3 = ((b2 &amp; 0xF) &lt;&lt; 2) | (b3 >> 6);
c4 = b3 &amp; 0x3F;
r = "";
r += encode6bit(c1 &amp; 0x3F);
r += encode6bit(c2 &amp; 0x3F);
r += encode6bit(c3 &amp; 0x3F);
r += encode6bit(c4 &amp; 0x3F);
return r;
}
function encode6bit(b) {
if (b &lt; 10) {
return String.fromCharCode(48 + b);
}
b -= 10;
if (b &lt; 26) {
return String.fromCharCode(65 + b);
}
b -= 26;
if (b &lt; 26) {
return String.fromCharCode(97 + b);
}
b -= 26;
if (b == 0) {
return '-';
}
if (b == 1) {
return '_';
}
return '?';
}
var deflater = window.SharedWorker &amp;&amp; new SharedWorker('/js/rawdeflate.js');
if (deflater) {
deflater.port.addEventListener('message', done_deflating, false);
deflater.port.start();
} else if (window.Worker) {
deflater = new Worker('/js/rawdeflate.js');
deflater.onmessage = done_deflating;
}
function done_deflating(e) {
const img = document.getElementById("plantuml-eg");
img.src = "http://www.plantuml.com/plantuml/img/"+encode64(e.data);
}
function compress(s) {
s = unescape(encodeURIComponent(s));
if (deflater) {
if (deflater.port &amp;&amp; deflater.port.postMessage) {
deflater.port.postMessage(s);
} else {
deflater.postMessage(s);
}
} else {
setTimeout(function() {
done_deflating({ data: deflate(s) });
}, 100);
}
}
compress("\n@startuml\ndigraph G {\n rankdir=LR;\n Item -\u003e Checkpoint_1 [label=\u0022scan\u0022];\n Item -\u003e Checkpoint_2 [label=\u0022scan\u0022];\n Item -\u003e Checkpoint_3 [label=\u0022scan\u0022];\n}\n@enduml")
&lt;/script>
&lt;h2 id="accounting">Accounting&lt;/h2>
&lt;p>We also use the Document Graph to store data required to operate a double-entry accounting system. This system allows users to generate classical accounting reports such as Balance Sheet and Income Statement from blockchain transactions.&lt;/p>
&lt;p>Accountants must be able to tag transactions with additional data, references, files, etc., and they must also be able to assign a general ledger account to appropriately calculate debits and credits.&lt;/p>
&lt;h1 id="features">Features&lt;/h1>
&lt;h2 id="end-user-accessibility">End-user Accessibility&lt;/h2>
&lt;p>The Document Graph Explorer allows for any user with a blockchain account to create and edit content that they own within the graph, and they may create between any two nodes in the graph.&lt;/p>
&lt;p>This level of accessibility to non-technical users is unprecedented. It allows them to collaboratively create and connect content with all of the benefits of blockchain. This level of capability was previously only accessible to highly technical engineers.&lt;/p>
&lt;h2 id="file-and-ipfs-integration">File and IPFS Integration&lt;/h2>
&lt;p>Document Graph has integrated support for storing data or files within IPFS and saving that files’ CID (hash) within the document.&lt;/p>
&lt;h2 id="encryption-support">Encryption Support&lt;/h2>
&lt;p>Document Graph Explorer supports encryption of a specific content item’s value. In DGE, the user is prompted to enter a password that is used for symmetric AES encryption. This secret simply encrypts the value and the ciphertext is persisted in the document.&lt;/p>
&lt;p>In a future release, we may integrate with the &lt;a href="https://phala.network/en/">Khala/Phala&lt;/a> confidential blockchain. Also, we are evaluating integration with &lt;a href="https://www.pad.tech/">PAD&lt;/a> as a trustless way to share the secret in a manner that alerts the owner when the secret is accessed. This is useful for interesting use cases such as one-time decrypt use cases and “in case of emergency” use cases.&lt;/p>
&lt;h2 id="graphql-caching">GraphQL Caching&lt;/h2>
&lt;p>Document Graph supports easy integration with &lt;a href="https://dgraph.io">DGraph&lt;/a>, an open source distributed graph engine. The document graph cache listens for new blocks, and upon finalization, updates the DGraph graph to reflect any updates to the on-chain graph. DGraph has excellent tooling and ergonomics for querying, custom types or schemas, data visualizer, full-text search, and much more.&lt;/p>
&lt;h2 id="composable-sdk-experience-cli">Composable SDK Experience (CLI)&lt;/h2>
&lt;p>Document Graph is built to be highly composable and also support an ergonomic developer experience. In addition to the Document Graph Explorer web application, there is a CLI (written in Go) that supports all of the create, read, update, and delete operations directly against the blockchain.&lt;/p>
&lt;h2 id="plugin-architecture-for-custom-renderers-and-editors">Plugin Architecture for Custom Renderers and Editors&lt;/h2>
&lt;p>Developers can include special fields within their document to enable custom viewers or editors. For example, if the field “preferred_renderer” or “preferred_editor” is populated with an endpoint, this endpoint will be used to render or edit the document.&lt;/p>
&lt;h1 id="background-of-semantic-triples">Background of Semantic Triples&lt;/h1>
&lt;p>Databases typically store data in a tabular format, where a table has set of columns and rows, like a spreadsheet.&lt;/p>
&lt;p>However, IRL, we tend to think in statements of &lt;code>Subject&lt;/code>, &lt;code>Predicate&lt;/code> (&lt;code>Verb&lt;/code>), and &lt;code>Object&lt;/code>. This is particularly true in the English language where word order is subject, verb, object (SVO). This information construct is known as &lt;code>triples&lt;/code>, or &lt;a href="https://en.wikipedia.org/wiki/Semantic_triple">semantic triples&lt;/a>. The &lt;a href="https://www.w3.org/RDF/">W3C Resource Description Framework&lt;/a> is a leading specification for organizing these statements into semantic triples.&lt;/p>
&lt;p>As Lenhert describes &lt;a href="https://www.synaptica.com/triples-triads-and-semantics/">here&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;One of the fundamental benefits of these RDF-based controlled vocabulary structures are their dual nature as being both human intelligible as well as machine readable (and, therefore, portable). Like their basic constituent subject-verb-object basis, ontologies convey rich meaning in relatively simple and compact statements, making them extremely useful in modeling complex knowledge environments.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>The following diagrams express semantic triples in various terms.&lt;/p>
&lt;h3 id="using-the-natural-english-sovhttpsenwikipediaorgwikisubjecte28093verbe28093object-terms">Using the natural English &lt;a href="https://en.wikipedia.org/wiki/Subject%E2%80%93verb%E2%80%93object">SOV&lt;/a> terms&lt;/h3>
&lt;img id="plantuml-dg1"/>
&lt;script src="https://hashed.io/js/rawdeflate.js">&lt;/script>
&lt;script>
function encode64(data) {
r = "";
for (i=0; i&lt;data.length; i+=3) {
if (i+2==data.length) {
r +=append3bytes(data.charCodeAt(i), data.charCodeAt(i+1), 0);
} else if (i+1==data.length) {
r += append3bytes(data.charCodeAt(i), 0, 0);
} else {
r += append3bytes(data.charCodeAt(i), data.charCodeAt(i+1),
data.charCodeAt(i+2));
}
}
return r;
}
function append3bytes(b1, b2, b3) {
c1 = b1 >> 2;
c2 = ((b1 &amp; 0x3) &lt;&lt; 4) | (b2 >> 4);
c3 = ((b2 &amp; 0xF) &lt;&lt; 2) | (b3 >> 6);
c4 = b3 &amp; 0x3F;
r = "";
r += encode6bit(c1 &amp; 0x3F);
r += encode6bit(c2 &amp; 0x3F);
r += encode6bit(c3 &amp; 0x3F);
r += encode6bit(c4 &amp; 0x3F);
return r;
}
function encode6bit(b) {
if (b &lt; 10) {
return String.fromCharCode(48 + b);
}
b -= 10;
if (b &lt; 26) {
return String.fromCharCode(65 + b);
}
b -= 26;
if (b &lt; 26) {
return String.fromCharCode(97 + b);
}
b -= 26;
if (b == 0) {
return '-';
}
if (b == 1) {
return '_';
}
return '?';
}
var deflater = window.SharedWorker &amp;&amp; new SharedWorker('/js/rawdeflate.js');
if (deflater) {
deflater.port.addEventListener('message', done_deflating, false);
deflater.port.start();
} else if (window.Worker) {
deflater = new Worker('/js/rawdeflate.js');
deflater.onmessage = done_deflating;
}
function done_deflating(e) {
const img = document.getElementById("plantuml-dg1");
img.src = "http://www.plantuml.com/plantuml/img/"+encode64(e.data);
}
function compress(s) {
s = unescape(encodeURIComponent(s));
if (deflater) {
if (deflater.port &amp;&amp; deflater.port.postMessage) {
deflater.port.postMessage(s);
} else {
deflater.postMessage(s);
}
} else {
setTimeout(function() {
done_deflating({ data: deflate(s) });
}, 100);
}
}
compress("\n@startuml\ndigraph G {\n rankdir=LR;\n Subject -\u003e Object [label=\u0022Verb\u0022];\n}\n@enduml")
&lt;/script>
&lt;h3 id="using-common-graph-theoryhttpsenwikipediaorgwikivertex_graph_theory-terms">Using common &lt;a href="https://en.wikipedia.org/wiki/Vertex_(graph_theory)">graph theory&lt;/a> terms&lt;/h3>
&lt;img id="plantuml-dg2"/>
&lt;script src="https://hashed.io/js/rawdeflate.js">&lt;/script>
&lt;script>
function encode64(data) {
r = "";
for (i=0; i&lt;data.length; i+=3) {
if (i+2==data.length) {
r +=append3bytes(data.charCodeAt(i), data.charCodeAt(i+1), 0);
} else if (i+1==data.length) {
r += append3bytes(data.charCodeAt(i), 0, 0);
} else {
r += append3bytes(data.charCodeAt(i), data.charCodeAt(i+1),
data.charCodeAt(i+2));
}
}
return r;
}
function append3bytes(b1, b2, b3) {
c1 = b1 >> 2;
c2 = ((b1 &amp; 0x3) &lt;&lt; 4) | (b2 >> 4);
c3 = ((b2 &amp; 0xF) &lt;&lt; 2) | (b3 >> 6);
c4 = b3 &amp; 0x3F;
r = "";
r += encode6bit(c1 &amp; 0x3F);
r += encode6bit(c2 &amp; 0x3F);
r += encode6bit(c3 &amp; 0x3F);
r += encode6bit(c4 &amp; 0x3F);
return r;
}
function encode6bit(b) {
if (b &lt; 10) {
return String.fromCharCode(48 + b);
}
b -= 10;
if (b &lt; 26) {
return String.fromCharCode(65 + b);
}
b -= 26;
if (b &lt; 26) {
return String.fromCharCode(97 + b);
}
b -= 26;
if (b == 0) {
return '-';
}
if (b == 1) {
return '_';
}
return '?';
}
var deflater = window.SharedWorker &amp;&amp; new SharedWorker('/js/rawdeflate.js');
if (deflater) {
deflater.port.addEventListener('message', done_deflating, false);
deflater.port.start();
} else if (window.Worker) {
deflater = new Worker('/js/rawdeflate.js');
deflater.onmessage = done_deflating;
}
function done_deflating(e) {
const img = document.getElementById("plantuml-dg2");
img.src = "http://www.plantuml.com/plantuml/img/"+encode64(e.data);
}
function compress(s) {
s = unescape(encodeURIComponent(s));
if (deflater) {
if (deflater.port &amp;&amp; deflater.port.postMessage) {
deflater.port.postMessage(s);
} else {
deflater.postMessage(s);
}
} else {
setTimeout(function() {
done_deflating({ data: deflate(s) });
}, 100);
}
}
compress("\n@startuml\ndigraph G {\n rankdir=LR;\n Vertex1 -\u003e Vertex2 [label=\u0022Edge\u0022];\n}\n@enduml")
&lt;/script>
&lt;h3 id="using-the-document-graph-terms">Using the Document Graph terms&lt;/h3>
&lt;img id="plantuml-dg3"/>
&lt;script src="https://hashed.io/js/rawdeflate.js">&lt;/script>
&lt;script>
function encode64(data) {
r = "";
for (i=0; i&lt;data.length; i+=3) {
if (i+2==data.length) {
r +=append3bytes(data.charCodeAt(i), data.charCodeAt(i+1), 0);
} else if (i+1==data.length) {
r += append3bytes(data.charCodeAt(i), 0, 0);
} else {
r += append3bytes(data.charCodeAt(i), data.charCodeAt(i+1),
data.charCodeAt(i+2));
}
}
return r;
}
function append3bytes(b1, b2, b3) {
c1 = b1 >> 2;
c2 = ((b1 &amp; 0x3) &lt;&lt; 4) | (b2 >> 4);
c3 = ((b2 &amp; 0xF) &lt;&lt; 2) | (b3 >> 6);
c4 = b3 &amp; 0x3F;
r = "";
r += encode6bit(c1 &amp; 0x3F);
r += encode6bit(c2 &amp; 0x3F);
r += encode6bit(c3 &amp; 0x3F);
r += encode6bit(c4 &amp; 0x3F);
return r;
}
function encode6bit(b) {
if (b &lt; 10) {
return String.fromCharCode(48 + b);
}
b -= 10;
if (b &lt; 26) {
return String.fromCharCode(65 + b);
}
b -= 26;
if (b &lt; 26) {
return String.fromCharCode(97 + b);
}
b -= 26;
if (b == 0) {
return '-';
}
if (b == 1) {
return '_';
}
return '?';
}
var deflater = window.SharedWorker &amp;&amp; new SharedWorker('/js/rawdeflate.js');
if (deflater) {
deflater.port.addEventListener('message', done_deflating, false);
deflater.port.start();
} else if (window.Worker) {
deflater = new Worker('/js/rawdeflate.js');
deflater.onmessage = done_deflating;
}
function done_deflating(e) {
const img = document.getElementById("plantuml-dg3");
img.src = "http://www.plantuml.com/plantuml/img/"+encode64(e.data);
}
function compress(s) {
s = unescape(encodeURIComponent(s));
if (deflater) {
if (deflater.port &amp;&amp; deflater.port.postMessage) {
deflater.port.postMessage(s);
} else {
deflater.postMessage(s);
}
} else {
setTimeout(function() {
done_deflating({ data: deflate(s) });
}, 100);
}
}
compress("\n@startuml\ndigraph G {\n rankdir=LR;\n Document1 -\u003e Document2 [label=\u0022Edge\u0022];\n}\n@enduml")
&lt;/script>
&lt;p>Note that edges are both directional and labeled.&lt;/p>
&lt;h3 id="simple-example-of-a-semantic-triple">Simple Example of a Semantic Triple&lt;/h3>
&lt;img id="plantuml-dg4"/>
&lt;script src="https://hashed.io/js/rawdeflate.js">&lt;/script>
&lt;script>
function encode64(data) {
r = "";
for (i=0; i&lt;data.length; i+=3) {
if (i+2==data.length) {
r +=append3bytes(data.charCodeAt(i), data.charCodeAt(i+1), 0);
} else if (i+1==data.length) {
r += append3bytes(data.charCodeAt(i), 0, 0);
} else {
r += append3bytes(data.charCodeAt(i), data.charCodeAt(i+1),
data.charCodeAt(i+2));
}
}
return r;
}
function append3bytes(b1, b2, b3) {
c1 = b1 >> 2;
c2 = ((b1 &amp; 0x3) &lt;&lt; 4) | (b2 >> 4);
c3 = ((b2 &amp; 0xF) &lt;&lt; 2) | (b3 >> 6);
c4 = b3 &amp; 0x3F;
r = "";
r += encode6bit(c1 &amp; 0x3F);
r += encode6bit(c2 &amp; 0x3F);
r += encode6bit(c3 &amp; 0x3F);
r += encode6bit(c4 &amp; 0x3F);
return r;
}
function encode6bit(b) {
if (b &lt; 10) {
return String.fromCharCode(48 + b);
}
b -= 10;
if (b &lt; 26) {
return String.fromCharCode(65 + b);
}
b -= 26;
if (b &lt; 26) {
return String.fromCharCode(97 + b);
}
b -= 26;
if (b == 0) {
return '-';
}
if (b == 1) {
return '_';
}
return '?';
}
var deflater = window.SharedWorker &amp;&amp; new SharedWorker('/js/rawdeflate.js');
if (deflater) {
deflater.port.addEventListener('message', done_deflating, false);
deflater.port.start();
} else if (window.Worker) {
deflater = new Worker('/js/rawdeflate.js');
deflater.onmessage = done_deflating;
}
function done_deflating(e) {
const img = document.getElementById("plantuml-dg4");
img.src = "http://www.plantuml.com/plantuml/img/"+encode64(e.data);
}
function compress(s) {
s = unescape(encodeURIComponent(s));
if (deflater) {
if (deflater.port &amp;&amp; deflater.port.postMessage) {
deflater.port.postMessage(s);
} else {
deflater.postMessage(s);
}
} else {
setTimeout(function() {
done_deflating({ data: deflate(s) });
}, 100);
}
}
compress("\n@startuml\ndigraph G {\n rankdir=LR;\n Document1 -\u003e Document2 [label=\u0022Edge\u0022];\n}\n@enduml")
&lt;/script>
&lt;h2 id="blockchain-change-management">Blockchain Change Management&lt;/h2>
&lt;p>At their core, blockchains are used to manage data and state changes on that data. The structure of this data is nearly always based on a custom-built struct within a pallet or smart contract. Applications that are built on blockchains are typically built for a specific smart contract’s data structure, and the application is highly coupled to that application. When a data structure changes, it typically requires a complex migration of existing data and source code within the smart contract as well as perhaps changes to other backend or service layers and the application itself.&lt;/p>
&lt;p>For example, assume the overly simplified struct within a smart contract. Upon an approval, the amount would be sent to the account indicated.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Proposal&lt;/span> {
&lt;span style="color:#66d9ef">pub&lt;/span> label: &lt;span style="color:#66d9ef">str&lt;/span>,
&lt;span style="color:#66d9ef">pub&lt;/span> account: &lt;span style="color:#a6e22e">AccountId&lt;/span>,
&lt;span style="color:#66d9ef">pub&lt;/span> amount: &lt;span style="color:#66d9ef">u32&lt;/span>,
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, let&amp;rsquo;s say the DAO wants to add support for recurring payments. This would need to be supported within the data model by adding a time period to use as the recurring period and the total number of payments.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Proposal&lt;/span> {
&lt;span style="color:#66d9ef">pub&lt;/span> title: &lt;span style="color:#66d9ef">str&lt;/span>,
&lt;span style="color:#66d9ef">pub&lt;/span> account: &lt;span style="color:#a6e22e">AccountId&lt;/span>,
&lt;span style="color:#66d9ef">pub&lt;/span> amount: &lt;span style="color:#66d9ef">u32&lt;/span>,
&lt;span style="color:#66d9ef">pub&lt;/span> time_period_seconds: &lt;span style="color:#66d9ef">u32&lt;/span>,
&lt;span style="color:#66d9ef">pub&lt;/span> payment_count: &lt;span style="color:#66d9ef">u32&lt;/span>,
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Depending on the blockchain, this change management event requires a series of gymnastics by developers to maintain a reasonable user experience. For example, on non-upgradable platforms, it may require clients to query from both structs, or if upgradable, may require erasing data from the original data store and recreating it (losing metadata in the process). Some may require maintaining both structures and adding a roll-up of sorts to maintain client backwards compatibility.&lt;/p>
&lt;p>All of these complications create a significant change management burden on software developers.&lt;/p>
&lt;h3 id="document-graph-solves-this">Document Graph Solves This&lt;/h3>
&lt;p>Document Graph alleviates the need for developers to change their persistence layer when making upgrades to their data model.&lt;/p>
&lt;p>This is achieved by supporting flexible variant pairs within a consistently structured &lt;code>document&lt;/code> type and support for an &lt;code>edge&lt;/code> type used to link the graph&amp;rsquo;s documents in meaningful ways.&lt;/p>
&lt;h1 id="specification">Specification&lt;/h1>
&lt;h2 id="document-data-model">Document Data Model&lt;/h2>
&lt;img id="plantuml-dg5"/>
&lt;script src="https://hashed.io/js/rawdeflate.js">&lt;/script>
&lt;script>
function encode64(data) {
r = "";
for (i=0; i&lt;data.length; i+=3) {
if (i+2==data.length) {
r +=append3bytes(data.charCodeAt(i), data.charCodeAt(i+1), 0);
} else if (i+1==data.length) {
r += append3bytes(data.charCodeAt(i), 0, 0);
} else {
r += append3bytes(data.charCodeAt(i), data.charCodeAt(i+1),
data.charCodeAt(i+2));
}
}
return r;
}
function append3bytes(b1, b2, b3) {
c1 = b1 >> 2;
c2 = ((b1 &amp; 0x3) &lt;&lt; 4) | (b2 >> 4);
c3 = ((b2 &amp; 0xF) &lt;&lt; 2) | (b3 >> 6);
c4 = b3 &amp; 0x3F;
r = "";
r += encode6bit(c1 &amp; 0x3F);
r += encode6bit(c2 &amp; 0x3F);
r += encode6bit(c3 &amp; 0x3F);
r += encode6bit(c4 &amp; 0x3F);
return r;
}
function encode6bit(b) {
if (b &lt; 10) {
return String.fromCharCode(48 + b);
}
b -= 10;
if (b &lt; 26) {
return String.fromCharCode(65 + b);
}
b -= 26;
if (b &lt; 26) {
return String.fromCharCode(97 + b);
}
b -= 26;
if (b == 0) {
return '-';
}
if (b == 1) {
return '_';
}
return '?';
}
var deflater = window.SharedWorker &amp;&amp; new SharedWorker('/js/rawdeflate.js');
if (deflater) {
deflater.port.addEventListener('message', done_deflating, false);
deflater.port.start();
} else if (window.Worker) {
deflater = new Worker('/js/rawdeflate.js');
deflater.onmessage = done_deflating;
}
function done_deflating(e) {
const img = document.getElementById("plantuml-dg5");
img.src = "http://www.plantuml.com/plantuml/img/"+encode64(e.data);
}
function compress(s) {
s = unescape(encodeURIComponent(s));
if (deflater) {
if (deflater.port &amp;&amp; deflater.port.postMessage) {
deflater.port.postMessage(s);
} else {
deflater.postMessage(s);
}
} else {
setTimeout(function() {
done_deflating({ data: deflate(s) });
}, 100);
}
}
compress("\n@startuml\n@startmindmap\n* Document\n** Header\n*** Hash\n*** Owner\n*** Type\n*** Created \u0026 Updated Dates\n** Content Group 1\n*** Content Item 1\n**** Key (label)\n**** Value\n*** Content Item n\n** Content Group n\n@endmindmap\n@enduml")
&lt;/script>
&lt;p>Each document is comprised of the following:&lt;/p>
&lt;ul>
&lt;li>Header
&lt;ul>
&lt;li>[required] creator (account)&lt;/li>
&lt;li>[required] graph contract (where the document is saved)&lt;/li>
&lt;li>[optional] created date (timepoint)&lt;/li>
&lt;li>[optional] updated date (timepoint)&lt;/li>
&lt;li>[optional] hash of content (not including certificates or header)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Content
&lt;ul>
&lt;li>Value (variant) = &lt;code>std::variant &amp;lt;asset, string, time_point, name, int64&amp;gt; &lt;/code>&lt;/li>
&lt;li>Content = an optionally labeled FlexValue&lt;/li>
&lt;li>Content Group = vector&lt;Content>&lt;/li>
&lt;li>Content Groups = vector&lt;ContentGroup>&lt;/li>
&lt;li>Each document contains a single instance of ContentGroups.&lt;/li>
&lt;li>This provides enough flexibility to support:
&lt;ul>
&lt;li>data of all supported types,&lt;/li>
&lt;li>short clauses of annotated text,&lt;/li>
&lt;li>longer form sequenced data, e.g. chapters.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Certificates [optional]
&lt;ul>
&lt;li>Each document has &lt;code>O..n&lt;/code> certificates.&lt;/li>
&lt;li>Certificate
&lt;ul>
&lt;li>certifier: the &amp;lsquo;signer&amp;rsquo;&lt;/li>
&lt;li>notes: string data provided by signer&lt;/li>
&lt;li>certification_date: time_point&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></content></item><item><title>Hashed Chain - Chaos</title><link>https://hashed.io/hashed-chain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hashed.io/hashed-chain/</guid><description>Introduction Hashed Chain supports many of the popular prebuilt pallets, listed below, and also a custom pallet for Fruniques (FRactional UNIQUES) and a custom pallet for a gated marketplace, supporting optional pre-approval of each asset and each participant a configured set of Origin.
One immediate use case is with one of our partners, a tax credit marketplace. Tax credits are non-fungible tokens that may be subdivided in a manner where all data is inherited except for the amount, which is subtracted from the parent (similar to a UTXO chain).</description><content>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>&lt;a href="https://github.com/hashed-io/hashed-substrate/">Hashed Chain&lt;/a> supports many of the popular prebuilt pallets, listed below, and also a custom pallet for &lt;code>Fruniques&lt;/code> (&lt;code>FR&lt;/code>actional &lt;code>UNIQUES&lt;/code>) and a custom pallet for a gated marketplace, supporting optional pre-approval of each asset and each participant a configured set of Origin.&lt;/p>
&lt;p>One immediate use case is with one of our partners, a tax credit marketplace. Tax credits are non-fungible tokens that may be subdivided in a manner where all data is inherited except for the amount, which is subtracted from the parent (similar to a &lt;a href="https://academy.glassnode.com/concepts/utxo">UTXO chain&lt;/a>). This process may repeat indefinitely.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Frunique Specifications&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>A &lt;code>Frunique&lt;/code> is a type of NFT.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Like a vault, any set of fungible tokens or &lt;code>NFTs&lt;/code> may be locked into a &lt;code>Frunique&lt;/code>. The locked assets may only be unlocked when the &lt;code>Frunique&lt;/code> is burned.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Fruniques&lt;/code> can be composed of other &lt;code>Fruniques&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Fruniques&lt;/code> support minting a new &lt;strong>fungible&lt;/strong> token that is backed by a &lt;code>Frunique&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Fruniques&lt;/code> support &lt;a href="https://github.com/paritytech/substrate/tree/master/frame/uniques">Uniques&lt;/a> and &lt;a href="https://github.com/paritytech/substrate/tree/master/frame/assets">Assets&lt;/a> specifications for interoperability&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>This &lt;code>gated marketplace&lt;/code> includes a role for &lt;code>enroller&lt;/code> that is reponsible for confirming that new participants in the marketplace are eligible to participate. The accounts that hold &lt;code>enrollers&lt;/code> status are decided by the marketplace creator, and may be dynamic based on any Origin.&lt;/p>
&lt;p>An &lt;code>asset enroller&lt;/code> role may be responsible for confirming that new assets in the marketplace are eligible to participate. In the case of tax credits, a licensed CPA attests to the authenticity based on the information provided.&lt;/p>
&lt;p>The marketplace may also include a role for &lt;code>asset burner&lt;/code> or redeemer, which may be responsible for working with participants to offboard their assets. This may involve having a licensed CPA or attorney send information or a form with various parties, or perhaps have a deed notarized. The specific asset will govern which asset burners are eligible.&lt;/p>
&lt;h3 id="open-hashed-chain-on-polkadotjsorghttpspolkadotjsorgappsrpcwss3a2f2fn1hashedsystemsexplorer">&lt;a href="https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fn1.hashed.systems#/explorer">Open Hashed Chain on polkadot.js.org&lt;/a>&lt;/h3>
&lt;h2 id="architecture">Architecture&lt;/h2>
&lt;img id="plantuml-hc1"/>
&lt;script src="https://hashed.io/js/rawdeflate.js">&lt;/script>
&lt;script>
function encode64(data) {
r = "";
for (i=0; i&lt;data.length; i+=3) {
if (i+2==data.length) {
r +=append3bytes(data.charCodeAt(i), data.charCodeAt(i+1), 0);
} else if (i+1==data.length) {
r += append3bytes(data.charCodeAt(i), 0, 0);
} else {
r += append3bytes(data.charCodeAt(i), data.charCodeAt(i+1),
data.charCodeAt(i+2));
}
}
return r;
}
function append3bytes(b1, b2, b3) {
c1 = b1 >> 2;
c2 = ((b1 &amp; 0x3) &lt;&lt; 4) | (b2 >> 4);
c3 = ((b2 &amp; 0xF) &lt;&lt; 2) | (b3 >> 6);
c4 = b3 &amp; 0x3F;
r = "";
r += encode6bit(c1 &amp; 0x3F);
r += encode6bit(c2 &amp; 0x3F);
r += encode6bit(c3 &amp; 0x3F);
r += encode6bit(c4 &amp; 0x3F);
return r;
}
function encode6bit(b) {
if (b &lt; 10) {
return String.fromCharCode(48 + b);
}
b -= 10;
if (b &lt; 26) {
return String.fromCharCode(65 + b);
}
b -= 26;
if (b &lt; 26) {
return String.fromCharCode(97 + b);
}
b -= 26;
if (b == 0) {
return '-';
}
if (b == 1) {
return '_';
}
return '?';
}
var deflater = window.SharedWorker &amp;&amp; new SharedWorker('/js/rawdeflate.js');
if (deflater) {
deflater.port.addEventListener('message', done_deflating, false);
deflater.port.start();
} else if (window.Worker) {
deflater = new Worker('/js/rawdeflate.js');
deflater.onmessage = done_deflating;
}
function done_deflating(e) {
const img = document.getElementById("plantuml-hc1");
img.src = "http://www.plantuml.com/plantuml/img/"+encode64(e.data);
}
function compress(s) {
s = unescape(encodeURIComponent(s));
if (deflater) {
if (deflater.port &amp;&amp; deflater.port.postMessage) {
deflater.port.postMessage(s);
} else {
deflater.postMessage(s);
}
} else {
setTimeout(function() {
done_deflating({ data: deflate(s) });
}, 100);
}
}
compress("\n@startuml\nnode \u0022Other Polkadot Ecosystem\u0022 as OPE {\n [Other Marketplaces]\n}\n\npackage \u0022Protocol Layer\/Hashed Chain\u0022 {\n [Fruniques Pallet]\n [Marketplace Pallet] --\u003e [Other Marketplaces]\n [Advanced Frunique UI\/UX]\n [Services and Caching]\n}\n\nnode \u0022Statemint Chain\u0022 as SC {\n [Uniques Pallet]\n [Fruniques Pallet] --\u003e [Uniques Pallet]\n [Fruniques Pallet] --\u003e [Assets Pallet]\n [Assets Pallet]\n [Assets Pallet] --\u003e [Other Marketplaces]\n}\n\npackage \u0022End User Experiences\u0022 {\n [Afloat\/Tax Credits] --\u003e [Fruniques Pallet]\n [Afloat\/Tax Credits] --\u003e [Services and Caching]\n [DAO LLC Registrations] --\u003e [Fruniques Pallet]\n [DAO LLC Registrations] --\u003e [Services and Caching]\n [\u0027Get Gifted\u0027 NFTs] --\u003e [Fruniques Pallet]\n [Marketplace UI\/UX] --\u003e [Fruniques Pallet]\n [Marketplace UI\/UX] --\u003e [Marketplace Pallet]\n [\u0027Get Gifted\u0027 NFTs] --\u003e [Marketplace UI\/UX]\n}\n@enduml")
&lt;/script>
&lt;h2 id="composability">Composability&lt;/h2>
&lt;img id="plantuml-hc2"/>
&lt;script src="https://hashed.io/js/rawdeflate.js">&lt;/script>
&lt;script>
function encode64(data) {
r = "";
for (i=0; i&lt;data.length; i+=3) {
if (i+2==data.length) {
r +=append3bytes(data.charCodeAt(i), data.charCodeAt(i+1), 0);
} else if (i+1==data.length) {
r += append3bytes(data.charCodeAt(i), 0, 0);
} else {
r += append3bytes(data.charCodeAt(i), data.charCodeAt(i+1),
data.charCodeAt(i+2));
}
}
return r;
}
function append3bytes(b1, b2, b3) {
c1 = b1 >> 2;
c2 = ((b1 &amp; 0x3) &lt;&lt; 4) | (b2 >> 4);
c3 = ((b2 &amp; 0xF) &lt;&lt; 2) | (b3 >> 6);
c4 = b3 &amp; 0x3F;
r = "";
r += encode6bit(c1 &amp; 0x3F);
r += encode6bit(c2 &amp; 0x3F);
r += encode6bit(c3 &amp; 0x3F);
r += encode6bit(c4 &amp; 0x3F);
return r;
}
function encode6bit(b) {
if (b &lt; 10) {
return String.fromCharCode(48 + b);
}
b -= 10;
if (b &lt; 26) {
return String.fromCharCode(65 + b);
}
b -= 26;
if (b &lt; 26) {
return String.fromCharCode(97 + b);
}
b -= 26;
if (b == 0) {
return '-';
}
if (b == 1) {
return '_';
}
return '?';
}
var deflater = window.SharedWorker &amp;&amp; new SharedWorker('/js/rawdeflate.js');
if (deflater) {
deflater.port.addEventListener('message', done_deflating, false);
deflater.port.start();
} else if (window.Worker) {
deflater = new Worker('/js/rawdeflate.js');
deflater.onmessage = done_deflating;
}
function done_deflating(e) {
const img = document.getElementById("plantuml-hc2");
img.src = "http://www.plantuml.com/plantuml/img/"+encode64(e.data);
}
function compress(s) {
s = unescape(encodeURIComponent(s));
if (deflater) {
if (deflater.port &amp;&amp; deflater.port.postMessage) {
deflater.port.postMessage(s);
} else {
deflater.postMessage(s);
}
} else {
setTimeout(function() {
done_deflating({ data: deflate(s) });
}, 100);
}
}
compress("\n@startuml\ntitle \u0022Fruniques Composability\u0022\nnode \u0022Statemine NFT A\u0022 as statemine_nft_a\nnode \u0022Statemine NFT B\u0022 as statemine_nft_b\n\nnode \u0022Frunique NFT 1\u0022 as frq_1\nnode \u0022Frunique NFT 2\u0022 as frq_2\nnode \u0022Frunique NFT n\u0022 as frq_n\n\nnode \u0022Fungible Token\u0022 as fung_1\nnode \u0022Frunique NFT 2.1\u0022 as frq_2_1\nnode \u0022Frunique NFT 2.2\u0022 as frq_2_2\nnode \u0022Frunique NFT 2.3\u0022 as frq_2_3\n\nnote left of frq_2\n Source NFT locked and 1..n new Fruniques \n can be minted.\nend note\n\nnote bottom of frq_2_1\n Metadata values are inherited by\n default unless overridden.\nend note\n\nnote bottom of fung_1\n Parent Frunique owner decides \n the token supply, symbol, and \n metadata and is minted the tokens\nend note\n\nstatemine_nft_a --\u003e frq_1 \nstatemine_nft_b --\u003e frq_2 \nstatemine_nft_b --\u003e frq_n\n\nfrq_1 --\u003e fung_1\n\nfrq_2 --\u003e frq_2_1\nfrq_2 --\u003e frq_2_2\nfrq_2 --\u003e frq_2_3\n@enduml")
&lt;/script>
&lt;p>For more information about Fruniques, see the &lt;a href="https://github.com/hashed-io/hashed-substrate/tree/main/pallets/fruniques">pallet documentation&lt;/a>&lt;/p>
&lt;h3 id="other-pallets-on-hashed-chain">Other Pallets on Hashed Chain&lt;/h3>
&lt;h4 id="identityhttpswikipolkadotnetworkdocslearn-identity">&lt;a href="https://wiki.polkadot.network/docs/learn-identity">Identity&lt;/a>&lt;/h4>
&lt;p>Hashed Chain provides a naming system that allows participants to add information, such as social media accounts, web domains, email addresses, etc. to their on-chain account and subsequently ask for verification of this information by registrars.&lt;/p>
&lt;h4 id="indiceshttpswikipolkadotnetworkdocslearn-accountsindices">&lt;a href="https://wiki.polkadot.network/docs/learn-accounts#indices">Indices&lt;/a>&lt;/h4>
&lt;p>An index is a short and easy-to-remember version of an address. Claiming an index requires a deposit that is released when the index is cleared.&lt;/p>
&lt;h4 id="social-recovery">&lt;a href="">Social Recovery&lt;/a>&lt;/h4>
&lt;p>The Recovery pallet is an M-of-N social recovery tool for users to gain access to their accounts if the private key or other authentication mechanism is lost. Through this pallet, a user is able to make calls on-behalf-of another account which they have recovered. The recovery process is protected by trusted &amp;ldquo;friends&amp;rdquo; whom the original account owner chooses. A threshold (M) out of N friends are needed to give another account access to the recoverable account.&lt;/p>
&lt;h4 id="uniques-nftshttpsgithubcomparitytechsubstratetreemasterframeuniques">&lt;a href="https://github.com/paritytech/substrate/tree/master/frame/uniques">Uniques (NFTs)&lt;/a>&lt;/h4>
&lt;p>A simple, secure module for dealing with non-fungible assets.&lt;/p>
&lt;h4 id="treasuryhttpswikipolkadotnetworkdocslearn-treasury">&lt;a href="https://wiki.polkadot.network/docs/learn-treasury">Treasury&lt;/a>&lt;/h4>
&lt;p>The Treasury pallet provides a &amp;ldquo;pot&amp;rdquo; of funds that can be managed by stakeholders in the system and a structure for making spending proposals from this pot.&lt;/p>
&lt;p>Roadmap: Integrate support for native multisig BTC in the treasury via PSBT and output descriptors&lt;/p>
&lt;h4 id="societyhttpswikipolkadotnetworkdocsmaintain-guides-society-kusama">&lt;a href="https://wiki.polkadot.network/docs/maintain-guides-society-kusama">Society&lt;/a>&lt;/h4>
&lt;p>The Society module is an economic game which incentivizes users to participate and maintain a membership society.&lt;/p>
&lt;h4 id="bountieshttpswikipolkadotnetworkdocslearn-treasurybounties-spending">&lt;a href="https://wiki.polkadot.network/docs/learn-treasury#bounties-spending">Bounties&lt;/a>&lt;/h4></content></item></channel></rss>